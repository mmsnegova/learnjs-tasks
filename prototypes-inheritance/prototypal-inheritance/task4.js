/* Почему наедаются оба хомяка?
важность: 5
У нас есть два хомяка: шустрый (speedy) и ленивый (lazy);
оба наследуют от общего объекта hamster.

Когда мы кормим одного хомяка, второй тоже наедается.
Почему? Как это исправить?
*/

let = {
  stomach: [],

  eat(food) {
    /* this.stomach.push(food); */
    this.stomach = [food, ...this.stomach];
  },
};

let speedy = {
  __proto__: hamster,
};

let lazy = {
  __proto__: hamster,
};

// Этот хомяк нашёл еду
speedy.eat("apple");
console.log(speedy.stomach); // apple

// У этого хомяка тоже есть еда. Почему? Исправьте
console.log(lazy.stomach); // apple

/* Так происходит, потому что при вызове метода eat, нужно добавить элемент в массив stomach,
но у объекта speedy ег нет, поэтому этот массив ищется в прототипе, тоже самое присходит
и для lazy. Получается, что элементы добавляются в один и тот же массив в объекте hamster.
Поэтому при обращению к speedy.stomach и lazy.stomach мы обращаемся к одному и тому же массиву
из протоипа hamster. 
Для решенения проблемы нужно создать у каждого наследуемого объекта свой stomach,
для этого будем записывать в методе прототипа this.stomach = [food, ...this.stomach] - так мы будем
клонировать массив с food в свсвойство stomach, которое будет у каждого объекта своё*/
